<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tryton | Pritish Chakraborty]]></title>
  <link href="http://PritishC.github.io/blog/categories/tryton/atom.xml" rel="self"/>
  <link href="http://PritishC.github.io/"/>
  <updated>2014-10-22T11:02:33+05:30</updated>
  <id>http://PritishC.github.io/</id>
  <author>
    <name><![CDATA[Pritish Chakraborty]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Beginning Tryton]]></title>
    <link href="http://PritishC.github.io/blog/2014/10/21/beginning-tryton/"/>
    <updated>2014-10-21T12:05:18+05:30</updated>
    <id>http://PritishC.github.io/blog/2014/10/21/beginning-tryton</id>
    <content type="html"><![CDATA[Before we go through the setup of the Tryton client and server, one should go
through setting up the [virtualenv](/blog/2014/10/16/virtualenv-setup-for-tryton/)
and [postgres](/blog/2014/10/19/postgres-setup/).
Also, install `libxslt-dev` (and perhaps `libz-dev` as well) with your package 
manager because the `lxml` package needs it.

<!--more-->

Right, now let&#8217;s activate our virtualenv and install the requisite packages.

<figure class='code'><figcaption><span>installing tryton/trytond</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>workon trytonenv
</span><span class='line'><span class="nv">$ </span>pip install trytond trytond-party trytond-company trytond-country trytond-currency
</span><span class='line'><span class="nv">$ </span>pip install tryton
</span><span class='line'><span class="nv">$ </span>pip install psycopg2 <span class="c"># Required for DB connectivity.</span>
</span></code></pre></td></tr></table></div></figure>

The packages that follow `trytond` are Tryton modules. `trytond` is the server
and `tryton` is the client. Any server needs a configuration file, and we have
one for ours too. Picked up from the Gentoo wiki -:

<figure class='code'><figcaption><span>sample trytond.conf  (trytond.conf)</span> <a href='/downloads/code/trytond.conf'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>#This file is part of Tryton.  The COPYRIGHT file at the top level of
</span><span class='line'>#this repository contains the full copyright notices and license terms.
</span><span class='line'>[options]
</span><span class='line'>
</span><span class='line'># Activate the json-rpc protocol
</span><span class='line'>jsonrpc = *:8000
</span><span class='line'>#ssl_jsonrpc = False
</span><span class='line'>
</span><span class='line'># This is the hostname used when generating tryton URI
</span><span class='line'>#hostname_jsonrpc =
</span><span class='line'>
</span><span class='line'># Configure the path of json-rpc data
</span><span class='line'>#jsondata_path = /var/www/localhost/tryton
</span><span class='line'>
</span><span class='line'># Activate the xml-rpc protocol
</span><span class='line'>#xmlrpc = *:8069
</span><span class='line'>#ssl_xmlrpc = False
</span><span class='line'>
</span><span class='line'># Activate the webdav protocol
</span><span class='line'>#webdav = *:8080
</span><span class='line'>#ssl_webdav = False
</span><span class='line'>
</span><span class='line'># This is the hostname used when generating WebDAV URI
</span><span class='line'>#hostname_webdav =
</span><span class='line'>
</span><span class='line'># Configure the database type
</span><span class='line'># allowed values are postgresql, sqlite, mysql
</span><span class='line'>db_type = postgresql
</span><span class='line'>
</span><span class='line'># Configure the database connection
</span><span class='line'>## Note: Only databases owned by db_user will be displayed in the connection dialog
</span><span class='line'>## of the Tryton client. db_user must have create permission for new databases
</span><span class='line'>## to be able to use automatic database creation with the Tryton client.
</span><span class='line'>db_host = localhost
</span><span class='line'>db_port = 5432
</span><span class='line'>db_user = postgres
</span><span class='line'>db_password = dbpassword
</span><span class='line'>db_minconn = 1
</span><span class='line'>db_maxconn = 64
</span><span class='line'>
</span><span class='line'># Configure the postgresql path for the executable
</span><span class='line'>#pg_path = None
</span><span class='line'>
</span><span class='line'># Configure the Tryton server password
</span><span class='line'>admin_passwd = admin
</span><span class='line'>
</span><span class='line'># Configure the path of the files for the pid and the logs
</span><span class='line'>#pidfile = False
</span><span class='line'>#logfile = False
</span><span class='line'>
</span><span class='line'>#privatekey = server.pem
</span><span class='line'>#certificate = server.pem
</span><span class='line'>
</span><span class='line'># Configure the SMTP connection
</span><span class='line'>#smtp_server = localhost
</span><span class='line'>#smtp_port = 25
</span><span class='line'>#smtp_ssl = False
</span><span class='line'>#smtp_tls = False
</span><span class='line'>#smtp_password = False
</span><span class='line'>#smtp_user = False
</span><span class='line'>
</span><span class='line'># Configure the path to store attachments and sqlite database
</span><span class='line'>#data_path = /var/lib/trytond
</span><span class='line'>
</span><span class='line'># Allow to run more than one instance of trytond
</span><span class='line'>#multi_server = False
</span><span class='line'>
</span><span class='line'># Configure the session timeout (inactivity of the client in sec)
</span><span class='line'>#session_timeout = 600
</span><span class='line'>
</span><span class='line'># Enable auto-reload of modules if changed
</span><span class='line'>#auto_reload = True
</span><span class='line'>
</span><span class='line'># Prevent database listing
</span><span class='line'>#prevent_dblist = False
</span><span class='line'>
</span><span class='line'># Enable cron
</span><span class='line'># cron = True
</span><span class='line'>
</span><span class='line'># unoconv connection
</span><span class='line'>#unoconv = pipe,name=trytond;urp;StarOffice.ComponentContext
</span><span class='line'>
</span><span class='line'># Number of retries on database operational error
</span><span class='line'># retry = 5
</span><span class='line'>
</span><span class='line'># Default database language code
</span><span class='line'># language = en_US
</span><span class='line'>language = es_ES
</span><span class='line'>
</span><span class='line'># Timezone of the server
</span><span class='line'># timezone = False
</span></code></pre></td></tr></table></div></figure>

You might want to change the value of the `db_password` field there, to the pass
that you had set for the postgres role earlier. You will be using this pass to
login to a database in Tryton.

Now, fire up two terminal windows or tabs, and run the following commands separately
in each -:

<figure class='code'><figcaption><span>tryton start</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>trytond -c path/to/trytond.conf
</span><span class='line'><span class="nv">$ </span>tryton -dv
</span></code></pre></td></tr></table></div></figure>

The `-dv` switch will allow you to see errors and other messages on the command
line for the Tryton client in a verbose manner.

You will arrive at a screen to login to the demo profile. Close that, and head
to File->Database->New Database. Note that the default administrator password
for Tryton is `admin`. Here, the `admin_passwd` field has been inserted to change
the default. One could remove this field if they wished.

<img src="/images/tryton-createdb.png" />

Congratulations, you&#8217;ve created your very first Tryton database. Now you can login
to it and install the necessary Tryton modules.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Postgres Setup]]></title>
    <link href="http://PritishC.github.io/blog/2014/10/19/postgres-setup/"/>
    <updated>2014-10-19T20:27:55+05:30</updated>
    <id>http://PritishC.github.io/blog/2014/10/19/postgres-setup</id>
    <content type="html"><![CDATA[This article offers a simple introduction to PostgreSQL and how to install it.
It is necessary for Tryton. In effect, this article is merely filler, and one can
skip it if one wishes so.

<!--more-->

[PostgreSQL](http://www.postgresql.org/) is an open-source ORDBMS which is a hardcore
programmer&#8217;s paradise. Since it is community-developed, it adheres to strict standards
and supports DB best practices. For more information, Google is your friend.

Now the installation of Postgres on your setup depends on the operating system you
have installed. For most Linux distros, Postgres has a distro-specific bundle which
can easily be installed using the particular package manager. It is usually advised 
to install this distro-specific bundle rather then going down the generic route.

I had faced several problems setting up Postgres on Linux Mint because I downloaded
and executed the generic bundle. You can find some mention of those problems here 
at the [wiki](https://github.com/PritishC/nereid-erms/wiki) of a project which I 
wrote as part of a company induction task. I am currently on Lubuntu, and this 
time, I used the package manager. Lesson learned.

Another thing you ideally should do is install [PGAdmin](http://www.pgadmin.org/). 
It is a very useful tool for management and administration of your databases. You
might often have to view a specific table inside the DB that you create for Tryton.

For Debian derivatives such as mine, 

<figure class='code'><figcaption><span>bash snippet</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get install postgresql postgresql-contrib
</span><span class='line'><span class="nv">$ </span>sudo apt-get install pgadmin3
</span></code></pre></td></tr></table></div></figure>

There is also the `postgres` user setup. After one is done installing the above,
one should fire up a terminal and set the `postgres` user&#8217;s password.

<figure class='code'><figcaption><span>postgres user</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo -u postgres psql postgres
</span><span class='line'><span class="nv">$ </span><span class="se">\p</span>assword postgres
</span></code></pre></td></tr></table></div></figure>

Equivalently, one could do `sudo su - postgres` to get into the postgres account,
and then run `psql -u postgres -h localhost` or something similar.
The second line in the above snippet sets a password for the postgres database 
role.

And that&#8217;s that. Soon, we shall be on a functioning Tryton setup!

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Virtualenv Setup for Tryton]]></title>
    <link href="http://PritishC.github.io/blog/2014/10/16/virtualenv-setup-for-tryton/"/>
    <updated>2014-10-16T22:31:26+05:30</updated>
    <id>http://PritishC.github.io/blog/2014/10/16/virtualenv-setup-for-tryton</id>
    <content type="html"><![CDATA[In this post, we shall learn how to setup a virtualenv for Tryton. Any new developer
who wishes to develop on Tryton needs to know a few basic things.

<!--more-->

Tryton is not for the faint-hearted. A new person can possibly take a long time to get adjusted
to the workflow.

* Have pip/setuptools ready. Use your package manager to get pip (apt, pacman, emerge
  etc).
* Install virtualenvwrapper. It is essential for any serious Python developer.
  Follow the steps given in the virtualenvwrapper [docs](http://virtualenvwrapper.readthedocs.org/en/latest/install.html)
  to setup everything - thing such as the `WORKON_HOME` variable.
* Now, before you make a virtualenv, make absolutely sure that you have a minimal
  set of site packages. Site packages are those Python packages that have been
  installed system-wide. Here is a list of packages that I have (via `pip freeze`) -:

  &#8220;` bash global pip freeze
  CDApplet==1.0
  CDBashApplet==1.0
  Cython==0.20.1post0
  apt-xapian-index==0.45
  arandr==0.1.7.1
  argparse==1.2.1
  chardet==2.0.1
  colorama==0.2.5
  defer==1.0.6
  gyp==0.1
  html5lib==0.999
  mercurial==2.8.2
  psutil==1.2.1
  pycups==1.9.66
  pycurl==7.19.3
  pygobject==3.12.0
  pysmbc==1.0.14.1
  pysqlite==2.6.3
  python-apt==0.9.3.5
  python-debian==0.1.21-nmu2ubuntu2
  python-sql==0.3
  pyxdg==0.25
  requests==2.2.1
  six==1.8.0
  stevedore==1.0.0
  urllib3==1.7.1
  virtualenv==1.11.6
  virtualenv-clone==0.2.5
  virtualenvwrapper==4.3.1
  wsgiref==0.1.2
  &#8220;`
* One particular package that you will find to give you headaches during the installation
  is `pygtk`. This package cannot be installed via pip. Why? Because screw you, that&#8217;s why.
  Now you have two options.
  + Follow the steps given [here](https://gist.github.com/ches/1094799) to install `pygtk` 
    inside a virtualenv. However, you will find that doing this over and over again would
    be tedious.
  + What about the package that has been installed system-wide? Could we possibly use it?
    Well, it turns out we can! The next step details on this method.  
    PS: If you don&#8217;t have it installed system-wide, do it bruh. Use your favorite package manager,
    I&#8217;m not judgin&#8217;.
* If you listened to me two steps ago and didn&#8217;t fall asleep - the reason I said that
  one must keep a minimal set of site packages is because these shall be incorporated
  into the virtualenv. These are the absolute bare-minimum requirements that every
  virtualenv will get. Now issue the following command in your terminal, in whichever
  directory you&#8217;ve readied for this purpose -:

  &#8220;` bash [virtualenv]
  mkproject &#8211;system-site-packages myenv
  &#8220;`

  Substitute myenv with any name you wish. And voila, you have your newly commissioned
  virtualenv.
* What does this have to do with `pygtk`, you ask? Well, since it was system-wide,
  it gets incorporated into your virtualenv and you don&#8217;t have to bother about it.

And that&#8217;s that folks! In the next post, we shall set up Postgres as Tryton uses
Postgres databases. Following that, we shall learn how to actually install Tryton, 
both the client and the server.
  

]]></content>
  </entry>
  
</feed>
