<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Github | Pritish Chakraborty]]></title>
  <link href="http://PritishC.github.io/blog/categories/github/atom.xml" rel="self"/>
  <link href="http://PritishC.github.io/"/>
  <updated>2015-09-02T22:55:15+05:30</updated>
  <id>http://PritishC.github.io/</id>
  <author>
    <name><![CDATA[Pritish Chakraborty]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Development Cheatsheet @ Openlabs]]></title>
    <link href="http://PritishC.github.io/blog/2015/01/25/development-cheatsheet/"/>
    <updated>2015-01-25T11:12:33+05:30</updated>
    <id>http://PritishC.github.io/blog/2015/01/25/development-cheatsheet</id>
    <content type="html"><![CDATA[The target audience of this article is the new arrivals at our company, and I
will try to make it as easy as possible on them. This assumes a basic knowledge
of Git/GitHub (and also knowing the difference between the two) and will follow
a scenario-based approach.

<!--more-->

## Ground Zero: Install ZSH/Oh-My-ZSH

This should be done before anything else, mainly because ZSH is an awesome shell
and is very customizable. Here&#8217;s a screenshot of my ZSH shell (I use the cloud
theme) -:

<img src="/images/zsh.png" />

Note how the branch name is shown in square-brackets and the lightning symbol
signifies that a change has occurred in some file(s) which may or may not be
committed.

<figure class='code'><figcaption><span>zero</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get install zsh curl
</span><span class='line'>Installing...
</span><span class='line'><span class="nv">$ </span>curl -L https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh <span class="p">|</span> sh
</span><span class='line'>Installing... <span class="o">(</span>you may be prompted to answer a few questions<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

Once the install is complete, close your current command prompt and re-open it.
You should now be using ZSH. You can customize your configuration by editing
the `.zshrc` file, which is present at the home folder (`$HOME`). I&#8217;ll leave
that bit out to the reader to experiment with stuff like themes.

## Scenario-I: Basic Git Setup.

To begin working on one of the company repositories, first fork the repo on GitHub
and then use the following commands on your terminal (assuming your SSH keys
have already been setup) -:

<figure class='code'><figcaption><span>scenario-I</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone git@github.com:&lt;your-username&gt;/&lt;repo-name&gt;
</span><span class='line'>Cloning...
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> &lt;repo-name&gt;
</span><span class='line'><span class="nv">$ </span>git remote add openlabs git@github.com:openlabs/&lt;repo-name&gt;
</span></code></pre></td></tr></table></div></figure>

You can run `git remote -vv` to check the names of your remotes. At this point,
you should have the remotes &#8216;origin&#8217; and &#8216;openlabs&#8217; for your cloned repository.

## Scenario-II: Writing A Feature/Hotfix

All work is usually based off of the develop branch, and so, you will checkout
your new branch off develop. There may be cases when you will have to checkout
off a version branch - that is described in the next scenario.

You can prefix your branch name with &#8216;feature&#8217; or &#8216;fix&#8217; depending on whether
it is a feature to be added or a fix to be made. Branch naming is completely
your choice, I only try provide a useful convention here.

For example, you wish to add a feature and your task ID is 0000. You will do so
as follows -:

<figure class='code'><figcaption><span>scenario-II</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git branch
</span><span class='line'>* develop
</span><span class='line'><span class="nv">$ </span>git checkout -b feature/task-0000
</span></code></pre></td></tr></table></div></figure>

Now you&#8217;re on the `feature/task-0000` branch, as the ZSH branch indicator should
tell you. You can do some work, and then commit it.

<figure class='code'><figcaption><span>scenario-II</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git status
</span><span class='line'>Shows files which are being tracked, are staged <span class="k">for</span> commit or are not staged.
</span><span class='line'><span class="nv">$ </span>gst
</span><span class='line'>Shorthand <span class="k">for</span> the above which works with zsh.
</span><span class='line'><span class="nv">$ </span>git add &lt;filenames&gt;
</span><span class='line'><span class="nv">$ </span>git commit
</span><span class='line'>Write your commit message and use VI shortcuts to save the message, i.e., :wq
</span><span class='line'>If you have nano configured as your editor instead, use that.
</span><span class='line'>Commit messages should be brief yet descriptive, and neatly written.
</span><span class='line'><span class="nv">$ </span>git config --global push.simple
</span><span class='line'>Needs to be <span class="nb">set </span>only once.
</span><span class='line'><span class="nv">$ </span>git push -uvf origin
</span><span class='line'>This pushes your current branch to the origin remote <span class="o">(</span>which is your fork<span class="o">)</span>.
</span></code></pre></td></tr></table></div></figure>

Now you can open a pull request from GitHub on the openlabs remote. Make sure
to get your work reviewed.

## Scenario-IIA: Writing A Feature For Version Branches

Sometimes, you may need to write features not for develop but for an earlier
version branch. In this case, you may do a `git fetch openlabs` to get the branch
data as is required. For example, some of our repositories are being moved to
v3.4, which becomes the develop branch. v3.2 gets a branch named `3.2`.

In this case, you need to checkout off of the 3.2 branch instead of develop, and
your PR should be sent on the 3.2 branch. The commands are the same, except
the branch you are checking out off changes.

## Scenario-III: Rebase To Keep Up

Rebasing is an important part of using git repositories. In a team environment,
you will have to rebase often to keep up with the latest changes, as you will
not be the only one pushing features and fixes to the openlabs remote.

It is advisable that before you checkout off of develop, you should do a rebase
as follows -:

<figure class='code'><figcaption><span>scenario-III</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git pull --rebase openlabs branch:branch
</span><span class='line'>Rebasing...
</span><span class='line'>May or may not introduce merge conflicts.
</span></code></pre></td></tr></table></div></figure>

`branch` here may either be develop or a version branch, as was explained earlier.

To resolve merge conflicts, you will need to search for files which have the
`>>>HEAD` symbol appearing in them. I usually do this with the `grep` command.
Take a look at the latest version of the files from GitHub and modify your 
local files accordingly. Be careful not to omit any code that was not added by
you.

Once you are done editing your local files, do a `git add` on them, and then run
`git rebase &#8211;continue`.

## Bonus Scenario: Protect Your Slack/HipChat From Attack!

One of the fun parts of being at Openlabs is that we advise our colleagues
not to leave their systems unlocked. If you leave your system on, you are fair
game for us :D.

Leaving your system on may or may not lead to one of the following -:

* Silly messages appearing on your HipChat/Slack, on the Water Cooler.
* Declarations of coming out of the closet on your Facebook (if we know you well
enough).
* Messed up configurations, and so on.

Vanilla Ubuntu users can use the Ctrl+L shortcut to lock their systems quickly.
For those who cannot use this shortcut for whatever reason (for example, Lubuntu
does not have such a shortcut), they may install `xscreensaver` using their
package manager and use this little script I made -:

<figure class='code'><figcaption><span>sample .logoutscript  (.logoutscript)</span> <a href='/downloads/code/.logoutscript'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ps cax <span class="p">|</span> grep xscreensaver &gt; /dev/null
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> -ne <span class="m">0</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  xscreensaver -no-splash <span class="p">&amp;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>xscreensaver-command -lock
</span></code></pre></td></tr></table></div></figure>

`grep` returns useful exit codes which can be used to find out whether `xscreensaver`
is running or not. If it is not running, it is made to run. Henceforth, the
lock command is applied.

You may save this script to your home directory and then run `sh ~/.logoutscript`
whenever you need to get away from your system!

PS: I will update this as more use cases come to mind.
]]></content>
  </entry>
  
</feed>
